import org.gradle.internal.os.OperatingSystem

plugins {
    //Applies application plugin also
    id 'org.beryx.runtime' version '1.11.3'
    id 'net.thauvin.erik.gradle.semver' version '1.0.4' 
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'idea'
}

apply plugin: 'java-library'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

idea.module.downloadJavadoc = true

application {
//    mainModule = "jpack"    
    mainClassName = "jpack.ClickMe"
}

//java {
//    modularity.inferModulePath = true
//}

javafx {
    version = "14"
    modules = ['javafx.controls']
}

sourceCompatibility = '14'
targetCompatibility = '14'

repositories {
    mavenCentral()
    // You may define additional repositories, or even remove "mavenCentral()".
    // Read more about repositories here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories
}

dependencies {
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation 'org.apache.commons:commons-lang3:3.11'
}

//Wrap inside projectsEvaluated closure as variables are not are available until 
//after the Configuration phase.
//https://stackoverflow.com/questions/13198358/how-to-get-project-version-in-custom-gradle-plugin/13198472#13198472
project.gradle.projectsEvaluated {
    runtime {
        options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
        additive = true
        
        jpackage {
            outputDir = "distribution"

            if (OperatingSystem.current().isLinux()) {
                appVersion = "$version"            
                installerOptions = [ 
                    '--verbose',
                    '--vendor', 'Test Vendor',
                    '--linux-menu-group', 'Games;',
                    '--description', 'Test Description',
                    '--linux-shortcut'
                ]
            } else if (OperatingSystem.current().isMacOsX()) {
                appVersion = "$version"            
                installerOptions = [
                    '--verbose',
                    '--vendor', 'Test Vendor',
                ]
            } else if (OperatingSystem.current().isUnix()) {
                println "*** Unix ***"
            } else if (OperatingSystem.current().isWindows()) {
                installerType = "msi"
                appVersion = "$version"
                installerOptions = [
                    '--verbose',
                    '--vendor', 'Test Vendor',
                    '--win-shortcut',
                    '--win-menu',
                    '--win-menu-group', 'Client',
                    '--win-per-user-install'                    
                ]
            }  else {
                println "*** Unknown ***"
            }
        }
    }
}
task (version).doLast {
    println "Version: $version"
}

tasks.build.doLast {
    println "Version: $version"
}

//jar {
//    from 'updater'
    // Keep jar clean:
//    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'

//    manifest {
//        attributes 'Main-Class': 'com.polygeddon.client.Main',
//                   'Class-Path': configurations.compileOnly.files.collect { "lib/$it.name" }.join(' ')
//    }
    // How-to add class path:
    //     https://stackoverflow.com/questions/22659463/add-classpath-in-manifest-using-gradle
    //     https://gist.github.com/simon04/6865179
//}

tasks.runtime.doLast {
    copy {
        from 'src/main/dist'
        into "$buildDir/distribution/packit/app"
    }
}