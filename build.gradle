import org.gradle.internal.os.OperatingSystem

plugins {
    id 'net.thauvin.erik.gradle.semver' version '1.0.4' 
    id 'org.openjfx.javafxplugin' version '0.0.9'
    id 'idea'
}

apply plugin: 'java-library'
apply plugin: 'application'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

idea.module.downloadJavadoc = true

application {
    mainClassName = "jpack.Launcher"
}

def packageDir = "jpackage"

javafx {
    version = "14"
    modules = ['javafx.controls']
}

sourceCompatibility = '14'
targetCompatibility = '14'

repositories {
    mavenCentral()
    // You may define additional repositories, or even remove "mavenCentral()".
    // Read more about repositories here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories
}

dependencies {
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation 'org.apache.commons:commons-lang3:3.11'
}

task (version).doLast {
    println "Version: $version"
}

tasks.build.doLast {
    println "Version: $version"
}

//jar {
    // Keep jar clean:
//    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'

//    manifest {
//        attributes 'Main-Class': 'jpack.Launcher',
//                   'Class-Path': configurations.compileOnly.files.collect { "lib/$it.name" }.join(' ')
//    }
    // How-to add class path:
    //     https://stackoverflow.com/questions/22659463/add-classpath-in-manifest-using-gradle
    //     https://gist.github.com/simon04/6865179
//}

private static Iterable<String> osAdaptiveCommand(List<String> commands) {
    def newCommands = []
    if (OperatingSystem.current().isWindows()) {
        newCommands = ['cmd', '/c']
    }

    newCommands.addAll(commands)
    return newCommands
}

task copyUpdater(type:Copy) {
    from "${buildDir}/install/${project.name}/updater"
    if (OperatingSystem.current().isLinux()) {
        into "${buildDir}/${packageDir}/${project.name}/lib/app/updater"
    } else if (OperatingSystem.current().isMacOsX()) {
        into "${buildDir}/${packageDir}/${project.name}.app/Contents/app/updater"
    } else if (OperatingSystem.current().isWindows()) {
        into "${buildDir}/${packageDir}/${project.name}/app/updater"
    } 
}

task packit(type:Exec, dependsOn:'packitImage') {
    //If project has not evaluated, version will be null
    project.gradle.projectsEvaluated {
        def arg = [
            'jpackage', 
            '--name', "$project.name", 
            '--app-version', "$version",
            '--description', 'Test Description',
            '--dest', "${buildDir}/${packageDir}",
            '--verbose',
            '--vendor', 'Test Vendor'
        ]

        if (OperatingSystem.current().isLinux()) {
            def osArgs = [
                '--app-image', "${buildDir}/${packageDir}/${project.name}",
                '--linux-menu-group', 'Games;',
                '--linux-shortcut'
            ]
            
            arg.addAll(osArgs)
            commandLine arg
            
        } else if (OperatingSystem.current().isMacOsX()) {
            def osArgs = [
                '--app-image', "${buildDir}/${packageDir}/${project.name}.app",
            ]
            
            arg.addAll(osArgs)
            commandLine arg

        } else if (OperatingSystem.current().isWindows()) {
            def osArgs = [
                '--app-image', "${buildDir}/${packageDir}/${project.name}",
                '--win-shortcut',
                '--win-menu',
                '--win-menu-group', 'Games',
                '--win-per-user-install',
                '--type', 'msi'
            ]

            arg.addAll(osArgs)
            commandLine osAdaptiveCommand(arg)

        }  else {
            println "*** Unknown ***"
        }
    }
}

task packitImage(type:Exec, dependsOn: ['clean', 'installDist']) {
    // If project has not evaluated, configured --main-jar does not exist in the 
    // --input directory.
    project.gradle.projectsEvaluated {
        def arg = [
            'jpackage',
            '--type', 'app-image',
            '--name', "$project.name",
            '--input', "${buildDir}/install/${project.name}/lib", 
            '--main-class', "$mainClassName",            
            '--main-jar', jar.archiveFileName.get(),
            '--dest', "${buildDir}/${packageDir}"
        ]
        
        commandLine osAdaptiveCommand(arg)
    }
        
}

//Copy the updater to the distribution after the app-image is built. Doing this 
//here keeps the updater off the classpath in the cfg for the main application.
packitImage.finalizedBy copyUpdater




